class Column:
    get(self, k):
        if k in self.memtable:
            return getSucc(k, memtable[k])
        else:
            if self.bloomfilter.find(k) == false:
                return "not found"
            else:
                if self.LRU.has(k) == true:
                    return getSucc(k, self.LRU.find(k))
                else:
                    if self.indextable.has(k) == false:
                        return "not found"
                    else:
                        offset = self.indextable.find(k)
                        v = self.sstable.seek(offset).getValue()
                        return getSucc(k, v)
    
    getSucc(self, k, v):
        self.LRU.update(k, v)
        return v
            
    set(self, k, v):
        self.memtable[k] = v
        self.bloomfilter.add(k)
        self.LRU.update(k, v)
        if self.memtable.size() > M:
            new Thread(self.dumpMem())  #asynchronously dump
            self.memtable = {} #can't use memtable.clear() here, otherwise the dumping object will be cleared
            #assumption:
            #we dont use lock on memtable, assume that there is only one thread giving get() and set()
        return true
    
    dumpMem(self):
        self.sstable = mergeSort(sstable.begin(), sorted(memtable.sorted), indexTable #for update#)
        
        
    __init__(self, sstableFile=none):
        if sstableFile != none:
            for kv, offest in sstableFile:
                self.indextable.add(kv.key, offset)
                self.bloomfilter.add(kv.key)
                self.memtable = {}
        else:
            self.sstableFile = ""
    close(self):
        dumpMem()


    
class Table:
    __init__(self, cols=none, tablePath=none):
        if cols != none:
            for col in cols:
                self.cols[col] = Column()
        if tablePath != none:
            self.load(tablePath)
    load(self, tablepath):
    insert(self, tuple):
    select(self, cols, where):
    join(self, other):
    
test():
    Table t1(("id", "valueA", "valueB"))
    Table t2("id", "valueA", "valueC")
    t1.insert(("bob", "pycharm", "java"))
    t2.insert(("alice", "xcode", "linux"))
    print t1.select(col = ("id", "valueA"), where = {"valueB":"java"})
    print t1.join(t2)
